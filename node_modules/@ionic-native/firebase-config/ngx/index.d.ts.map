{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @beta\n * @name Firebase Config\n * @description\n * Cordova plugin for Firebase Config\n *\n * @usage\n * ```typescript\n * import { FirebaseConfig } from '@ionic-native/firebase-config/ngx';\n *\n *\n * constructor(private firebaseConfig: FirebaseConfig) { }\n *\n * ...\n *\n *\n * this.firebaseConfig.getBoolean('my_key')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nexport declare class FirebaseConfig extends IonicNativePlugin {\n    /**\n     * Starts fetching configs, adhering to the specified minimum fetch interval.\n     *\n     * @param {number} expirationDuration\n     * @returns {Promise<null>}\n     */\n    fetch(expirationDuration?: number): Promise<null>;\n    /**\n     * Asynchronously activates the most recently fetched configs, so that the fetched key value pairs take effect.\n     *\n     * @returns {Promise<null>}\n     */\n    activate(): Promise<null>;\n    /**\n     * Asynchronously fetches and then activates the fetched configs.\n     *\n     * @returns {Promise<null>}\n     */\n    fetchAndActivate(): Promise<null>;\n    /**\n     * Fetches a boolean configuration value from RemoteConfig\n     *\n     * @param {string} key\n     * @returns {Promise<boolean>}\n     */\n    getBoolean(key: string): Promise<boolean>;\n    /**\n     * Fetches a string configuration value from RemoteConfig\n     *\n     * @param {string} key\n     * @returns {Promise<boolean>}\n     */\n    getString(key: string): Promise<string>;\n    /**\n     * Fetches a numeric configuration value from RemoteConfig\n     *\n     * @param {string} key\n     * @returns {Promise<boolean>}\n     */\n    getNumber(key: string): Promise<number>;\n    /**\n     * Fetches an array of bytes configuration value from RemoteConfig\n     *\n     * @param {string} key\n     * @returns {Promise<boolean>}\n     */\n    getBytes(key: string): Promise<any[]>;\n}\n"]}